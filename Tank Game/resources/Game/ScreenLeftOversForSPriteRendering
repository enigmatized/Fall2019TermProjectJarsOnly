
        //WHERE ANDRE AND I LEFT OFF....ish, but I took this Forloop out of the above
        //FOr Loop because I thought that was slow everything down.
        //___________________________________________________
        //Don't I want if enemy is possible to see?
        //Maybe create a data strcuture that maps where to be seen with
//            if (true) {
//                double rayY = (camera.xPos + ((mapY - camera.yPos + (1 - stepYSprite) / 2) / rayDirYSpriteRender) * rayDirXSpriteRender);
//                double rayX = (camera.yPos + ((mapX - camera.xPos + (1 - stepXSprite) / 2) / rayDirXSpriteRender) * rayDirYSpriteRender);
//
//
//                // calculate distance between sprinte and camera
//                // Game.Game.levelInfo.getEnemies().forEach(s -> s.distanceToCamera = RayCasting.MathAssist.distanceBetweenPoints(camera.xPos, camera.yPos, s.xpos, s.ypos));
//
//
//                // iterate over every sprite
//
//                for (Entity.Enemy enemy : Game.Game.levelInfo.getEnemies()) {
//                    double hitx = enemy.getDistFromLine(camera.xPos, camera.yPos, rayX, rayY);
//
//                    if (hitx < enemy.width) {
//                        double perpEnemyDist = RayCasting.MathAssist.distanceBetweenPoints(camera.xPos, camera.yPos, enemy.xpos, enemy.ypos);
//                        perpEnemyDist=Math.abs(perpEnemyDist);
//
//                        int enemyHeight;
//                        if (perpEnemyDist > 0) enemyHeight = Math.abs((int) (height / perpEnemyDist));
//                        else enemyHeight = height;
//                        //calculate lowest and highest pixel to fill in current stripe
//                        int drawEnemyStart = -lineHeightFORSPRITE / 2 + height / 2;
//                        if (drawEnemyStart < 0)
//                            drawEnemyStart = 0;
//                        int drawEnemyEnd = lineHeightFORSPRITE / 2 + height / 2;
//                        if (drawEnemyEnd >= height)
//                            drawEnemyEnd = height - 1;
//                        int spriteHeight = (int) Math.abs(height / enemy.yTransformed);
//                        int spriteWidth = spriteHeight;
//
//
//                        //int u = (n - (-spriteWidth / 2 + spriteScreenX)) * texture.getWidth() / spriteWidth;
//                        int texelx = (int) (hitx + 0.5) * enemy.getTexture().getWidth();
//                        for (int y = drawEnemyStart; y < drawEnemyEnd; y++) {
//                            int texY = (((y * 2 - height + lineHeightFORSPRITE) << 6) / lineHeightFORSPRITE) / 2;
//                            int color = enemy.getTexture().pixels[texelx + (texY * enemy.getTexture().SIZE)];
//                            pixels[(int)enemy.xpos + y * (width)] = color;
//                        }
//                    }
//
//                }
        //////////////////////////////////////////////////////////////
        //I AM GOING OFF THE SLOPE HERE AND TESTING MY OWN THING
        ////////////////////////////


        ////////////////////////////////////////////////////////////////
        //////  THE BELOW CHUNK IS A FUCKING MESS////////
        //////IT WAS AN EXPEIRMENT THAT I GAVE UP HALF WAY THROUGH/////
        ///////PROBABLY DELETE//////////////////////////////////
        //////////////////////////////////////////////////////
//        if (true) {
//            for (Entity.Enemy enemy : Game.Game.levelInfo.getEnemies()) {
//            double rayY = (camera.xPos + ((mapY - camera.yPos + (1 - stepYSprite) / 2) / rayDirYSpriteRender) * rayDirXSpriteRender);
//            double rayX = (camera.yPos + ((mapX - camera.xPos + (1 - stepXSprite) / 2) / rayDirXSpriteRender) * rayDirYSpriteRender);
//
//
//            double spriteX = enemy.xpos-camera.xPos;
//            double spriteY = enemy.ypos-camera.yPos;
//
//            // calculate distance between sprinte and camera
//            // Game.Game.levelInfo.getEnemies().forEach(s -> s.distanceToCamera = RayCasting.MathAssist.distanceBetweenPoints(camera.xPos, camera.yPos, s.xpos, s.ypos));
//
//            double invDet = 1.0/(camera.xPos *camera.yDir-camera.xDir*camera.yPos);
//
//
//            double transformX= invDet*(camera.yDir*spriteX-camera.xDir*spriteY);
//            double transformY= invDet*(-camera.yPos*spriteX+camera.xPos*spriteY);
//
//            int spriteScreenX= (int)((width/2)*(1+transformX/transformY));
//                //calculate height of the sprite on screen
//           // int spriteHeight = Math.abs((int)(height / (transformY)));
//
//                //Distance from enemy
//                double hitx = enemy.getDistFromLine(camera.xPos, camera.yPos, rayX, rayY);
//                // iterate over every sprite
//
//                //Okay now I have to calculate lowest and highest pixel to draw?
//
//
//
//                if (hitx < enemy.width) {
//                    double perpEnemyDist = RayCasting.MathAssist.distanceBetweenPoints(camera.xPos, camera.yPos, enemy.xpos, enemy.ypos);
//                    perpEnemyDist=Math.abs(perpEnemyDist);
//
//                    int enemyHeight;
//                    if (perpEnemyDist > 0) enemyHeight = Math.abs((int) (height / perpEnemyDist));
//                    else enemyHeight = height;
//                    //calculate lowest and highest pixel to fill in current stripe
//                    int drawEnemyStart = -lineHeightFORSPRITE / 2 + height / 2;
//                    if (drawEnemyStart < 0)
//                        drawEnemyStart = 0;
//                    int drawEnemyEnd = lineHeightFORSPRITE / 2 + height / 2;
//                    if (drawEnemyEnd >= height)
//                        drawEnemyEnd = height - 1;
//                    int spriteHeight = (int) Math.abs(height / enemy.yTransformed);
//                    int spriteWidth = spriteHeight;
//
//
//                    //int u = (n - (-spriteWidth / 2 + spriteScreenX)) * texture.getWidth() / spriteWidth;
//                    int texelx = (int) (hitx + 0.5) * enemy.getTexture().getWidth();
//                    for (int y = drawEnemyStart; y < drawEnemyEnd; y++) {
//                        int texY = (((y * 2 - height + lineHeightFORSPRITE) << 6) / lineHeightFORSPRITE) / 2;
//                        int color = enemy.getTexture().pixels[texelx + (texY * enemy.getTexture().SIZE)];
//                        pixels[(int)enemy.xpos + y * (width)] = color;
//                    }
//                }

        //          }


        //__________________________________________________

        //distance relative to the camera





















//                       int  n=(int)enemy.xTransformed;
//                   // for (int n = drawStartX; n < drawEndX; n++) {
//                        // if is in front of the camera (yTransformed > 0) but before the wall
//                        if (enemy.yTransformed > 0 /*&& enemy.xTransformed>0 */ &&enemy.distanceToCamera < perpWallDist) {
//                           System.out.println("This shouldn't print when bad guy behind wall");
//                            for (int y = drawStartY; y < drawEndY; y++) {
//
//                        //        int u = (n - (-spriteWidth / 2 + spriteScreenX)) * texture.getWidth() / spriteWidth;
//                                int v = (y - (-spriteHeight / 2 + spriteScreenY)) * texture.getHeight() / spriteHeight;
//                                int texel;
//                                try{
//                                texel = texture.getPixel(n, v);}
//                                catch (Exception e){
//                                    texel=1;
//                                    System.out.println(" "+v+" "+" "+" "+n);
//                                }
//                                if (texel != Color.BLACK.getRGB()) {
//
//                                    // apply effects if required
//                                    int y1 = clipVertically(y + verticalDisplace);
//
//
//                                    pixels[y1 * width + x] = texel;
//                                }
//                            }
//                        }
                // }